// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";



contract Trypto is ERC721, ERC721URIStorage, Ownable {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;

    // Counter : mapping for badge upgrades
    
    mapping(uint => uint) badgeCounter;
    uint pendingUpgrade;

    uint lastTimeStamp;
    uint interval;


     

    constructor(uint _interval) ERC721("Trypto", "TRT") {
        interval = _interval;
        lastTimeStamp = block.timestamp;
    }

    function safeMint(address to, string memory uri) public onlyOwner {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, uri);
        
    }


    // upgrade nft by Change tokenURI
    function upgradeBadge(uint _tokenId, string memory _uri) internal onlyOwner {
        _setTokenURI(_tokenId, _uri);

    }

    // get All nfts of User
    function getNftsOf(address _address) public view returns (string[] memory) {
        uint tokenCounts = _tokenIdCounter.current();
        string[] memory badges = new string[](tokenCounts);
        uint index = 0;
        for (uint i=0; i<tokenCounts; i++) {
            if (ownerOf(i) == _address) {
                string memory nftInfo = tokenURI(i);
                badges[index] = nftInfo;
                index++;
            }     
        }  
        return badges;
    }

    /// increase BadgeCounter if user visit the country again and click the button
    function increaseBadgeCounter(uint _tokenId) internal onlyOwner {
        require(badgeCounter[_tokenId] <= 2);
        badgeCounter[_tokenId]++;
        pendingUpgrade++;
    }

    // upgrade all nft badges 
    // function upgrade() internal onlyOwner {
    //     for(uint i=0;i<pendingUpgrade;i++){
            
    //     }
    // }



    // function checkUpkeep(
    //     bytes calldata /* checkData */
    // )
    //     external
    //     view
    //     returns (
    //         bool upkeepNeeded,
    //         bytes memory /* performData */
    //     )
    // {
    //     upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
    //     // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    // }

    // function performUpkeep(
    //     bytes calldata /* performData */
    // ) external {
    //     //We highly recommend revalidating the upkeep in the performUpkeep function
    //     if ((block.timestamp - lastTimeStamp) > interval) {
    //         lastTimeStamp = block.timestamp;
    //         upgrade();
    //     }
    //     // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    // }




    // The following functions are overrides required by Solidity.

    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
}